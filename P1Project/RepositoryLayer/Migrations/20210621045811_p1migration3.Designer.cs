// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RepositoryLayer;

namespace RepositoryLayer.Migrations
{
    [DbContext(typeof(P1Db))]
    [Migration("20210621045811_p1migration3")]
    partial class p1migration3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ModelsLibrary.CustomerModel", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("SignupDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("ModelsLibrary.CustomerOrderModel", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<decimal>("OrderCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StoreId");

                    b.ToTable("CustomerOrders");
                });

            modelBuilder.Entity("ModelsLibrary.ItemsModel", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ItemDescription")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<decimal>("ItemPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ItemId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("ModelsLibrary.OrderedItemsModel", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerOrderId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerOrderModelOrderId")
                        .HasColumnType("int");

                    b.Property<int?>("ItemsModelItemId")
                        .HasColumnType("int");

                    b.Property<int>("QuantityOrdered")
                        .HasColumnType("int");

                    b.HasKey("ItemId", "CustomerOrderId");

                    b.HasIndex("CustomerOrderModelOrderId");

                    b.HasIndex("ItemsModelItemId");

                    b.ToTable("OrderedItems");
                });

            modelBuilder.Entity("ModelsLibrary.StoreModel", b =>
                {
                    b.Property<int>("StoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StoreLocation")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("StoreId");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("ModelsLibrary.StoredItemsModel", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int>("InStock")
                        .HasColumnType("int");

                    b.Property<int?>("ItemsModelItemId")
                        .HasColumnType("int");

                    b.Property<int?>("StoreModelStoreId")
                        .HasColumnType("int");

                    b.HasKey("ItemId", "StoreId");

                    b.HasIndex("ItemsModelItemId");

                    b.HasIndex("StoreModelStoreId");

                    b.ToTable("StoredItems");
                });

            modelBuilder.Entity("ModelsLibrary.CustomerOrderModel", b =>
                {
                    b.HasOne("ModelsLibrary.CustomerModel", "Customer")
                        .WithMany("CustomerOrders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelsLibrary.StoreModel", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId");

                    b.Navigation("Customer");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("ModelsLibrary.OrderedItemsModel", b =>
                {
                    b.HasOne("ModelsLibrary.CustomerOrderModel", null)
                        .WithMany("OrderedItems")
                        .HasForeignKey("CustomerOrderModelOrderId");

                    b.HasOne("ModelsLibrary.ItemsModel", null)
                        .WithMany("OrderedItems")
                        .HasForeignKey("ItemsModelItemId");
                });

            modelBuilder.Entity("ModelsLibrary.StoredItemsModel", b =>
                {
                    b.HasOne("ModelsLibrary.ItemsModel", null)
                        .WithMany("StoredItems")
                        .HasForeignKey("ItemsModelItemId");

                    b.HasOne("ModelsLibrary.StoreModel", null)
                        .WithMany("StoredItems")
                        .HasForeignKey("StoreModelStoreId");
                });

            modelBuilder.Entity("ModelsLibrary.CustomerModel", b =>
                {
                    b.Navigation("CustomerOrders");
                });

            modelBuilder.Entity("ModelsLibrary.CustomerOrderModel", b =>
                {
                    b.Navigation("OrderedItems");
                });

            modelBuilder.Entity("ModelsLibrary.ItemsModel", b =>
                {
                    b.Navigation("OrderedItems");

                    b.Navigation("StoredItems");
                });

            modelBuilder.Entity("ModelsLibrary.StoreModel", b =>
                {
                    b.Navigation("StoredItems");
                });
#pragma warning restore 612, 618
        }
    }
}
